filter {
    if "pfsyslog" in [tags] {
        # If log originates from firewall (filterlog) 
        # Test
        # https://doc.pfsense.org/index.php/Filter_Log_Format_for_pfSense_2.2
        if [pflogsrc] == "filterlog" {
            mutate {
                add_tag => [ "firewall" ]
            }
            grok {
                match => [ "pfmsg", "%{INT:rule-number}?,%{INT:subrule-number}?,%{WORD:anchor}?,%{INT:tracker}?,%{WORD:interface}?,%{WORD:reason}?,%{WORD:action}?,%{WORD:direction}?,%{INT:ip-version}%{GREEDYDATA:ip-data}"]
            }
            # The log langauage has defined different data for different protocols
            if [ip-version] == "4" {
                mutate {
                    add_tag => ["ipv4"]
                }
                grok {
                    match => [ "ip-data", ",%{DATA:tos}?,%{DATA:ecn}?,%{INT:ttl}?,%{INT:id}?,%{INT:offset}?,%{DATA:flags}?,%{INT:protocol-id}?,%{WORD:protocol-text}?,%{INT:length}?,%{IP:src}?,%{IP:dst}?%{GREEDYDATA:protocol-data}" ]
                } 

                # Add GeoIP Data. Only perform this on non-local IP:s
                if [src] !~ /^(1(0|27).|192.168.).*/ {
                    mutate {
                        add_tag => ["geo-mapped", "geo-src"]
                    }
                    geoip {
                        source => "src"
                        target => "geoip"
                        database => "/etc/logstash/GeoLite2-City.mmdb"
                        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
                    }
                    mutate {
                        convert => ["[geoip][coordinates]", "float" ]
                    }
                }
                else if [dst] !~ /^(1(0|27).|192.168.).*/ {
                    mutate {
                        add_tag => ["geo-mapped", "geo-dst"]
                    }
                    geoip {
                        source => "dst"
                        target => "geoip"
                        database => "/etc/logstash/GeoLite2-City.mmdb"
                        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
                    }
                    mutate {
                        convert => ["[geoip][coordinates]", "float" ]
                    }
                }



                # Parse the specific protocol data (tcp, udp, icmp, carp)
                if [protocol-text] == "tcp" {
                    grok {
                        match => [ "protocol-data", ",%{INT:sport}?,%{INT:dport}?,%{INT:data-length}?,%{DATA:tcp-flags}?,%{INT:seq-num}?,%{INT:ack-num}?,%{DATA:tcp-win}?,%{DATA:urg}?,%{GREEDYDATA:tcp-options}" ]
                    }
                    mutate {
                        add_tag => ["tcp"]
                        remove_field => ["protocol-data", "ip-data" ]
                    }
                }
                 else if [protocol-text] == "udp" {
                    grok {
                        match => [ "protocol-data", ",%{INT:sport}?,%{INT:dport}?,%{INT:data-length}?%{GREEDYDATA:udp-extra}?" ]
                    }
                    mutate {
                        add_tag => ["udp"]
                        remove_field => ["protocol-data", "ip-data" ]
                    }
                }

            }
    
        }
    }
}
